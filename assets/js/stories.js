// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Hive.StoryHandler = (function(_super) {

    __extends(StoryHandler, _super);

    function StoryHandler(data, project) {
      this.data = data;
      this.project = project;
      this.resource = "" + this.project.resource + "/stories/" + this.data.id;
      this.name = 'storyHandler';
      this.parent = this.project.container;
      this.status = this.data.status;
      this.render();
    }

    StoryHandler.prototype.bind = function(container) {
      var self;
      self = this;
      this.container = container;
      this.statusIndicator = container.find('div.status');
      return Hive.getData(this.resource + '/tasks', function(data) {
        var handler, task, _i, _len, _ref, _results;
        _ref = data.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          task = _ref[_i];
          _results.push(handler = new Hive.TaskHandler(task, self));
        }
        return _results;
      });
    };

    StoryHandler.prototype.checkTaskStatus = function() {
      var unchecked;
      console.log("Checking Task Status");
      unchecked = this.container.find("input:checkbox:not(:checked)");
      if (unchecked.length) {
        return this.toggleStatus('started');
      } else {
        return this.toggleStatus('ready');
      }
    };

    StoryHandler.prototype.toggleStatus = function(string) {
      if (this.status === status) {
        return false;
      } else {
        Hive.setData(this.resource, {
          status: string
        });
        return this.statusIndicator.attr('class', 'status ' + string).text(string);
      }
    };

    return StoryHandler;

  })(Hive.UiObject);

  Hive.TaskHandler = (function(_super) {

    __extends(TaskHandler, _super);

    function TaskHandler(data, story) {
      this.data = data;
      this.story = story;
      this.resource = "" + this.story.resource + "/tasks/" + this.data.id;
      this.name = 'taskHandler';
      this.parent = this.story.container.find('div.tasks');
      this.status = this.data.status;
      this.render();
    }

    TaskHandler.prototype.bind = function(container) {
      var self;
      self = this;
      this.container = container;
      this.checkbox = container.find('input[type=checkbox]');
      this.text = container.find('span');
      self.checkIfComplete();
      return this.checkbox.change(function() {
        return self.toggleStatus();
      });
    };

    TaskHandler.prototype.checkIfComplete = function() {
      if (this.data.status === "complete") {
        this.checkbox.attr('checked', true);
        return this.text.attr('class', 'complete');
      }
    };

    TaskHandler.prototype.toggleStatus = function() {
      var _this = this;
      if (this.data.status === "incomplete") {
        this.data.status = "complete";
        this.text.attr('class', 'complete');
        return Hive.setData(this.resource, {
          status: 'complete'
        }, function() {
          return _this.story.checkTaskStatus();
        });
      } else {
        this.data.status = "incomplete";
        this.text.attr('class', '');
        return Hive.setData(this.resource, {
          status: 'incomplete'
        }, function() {
          return _this.story.checkTaskStatus();
        });
      }
    };

    return TaskHandler;

  })(Hive.UiObject);

}).call(this);
