// Generated by CoffeeScript 1.4.0
(function() {
  var root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Hive.LoginHandler = function() {};

  Hive.LoginHandler = (function(_super) {

    __extends(LoginHandler, _super);

    function LoginHandler() {
      this.name = 'loginHandler';
      this.viewport = 'main';
    }

    LoginHandler.prototype.bind = function(container) {
      this.container = container;
      this.form = container.find('form');
      this.text_field = container.find('input#api_key');
      this.submit = container.find('input[type=submit]');
      this.status = container.find('div.status');
      this.bindForm();
      return this.text_field.focus();
    };

    LoginHandler.prototype.bindForm = function() {
      var self;
      self = this;
      return this.form.submit(function(event) {
        event.preventDefault();
        self.tryLogin();
        return false;
      });
    };

    LoginHandler.prototype.tryLogin = function() {
      var key, self;
      self = this;
      key = this.text_field.val();
      return $.ajax({
        url: Hive.resource('me'),
        headers: {
          'X-Zen-ApiKey': key
        },
        dataType: 'JSON',
        error: function(xhr, status, error) {
          self.status.text('Error: invalid key.').attr('class', 'status error');
          return console.log(xhr);
        },
        success: function(data, status, xhr) {
          self.status.text('').attr('class', 'status');
          return Hive.login(key, data);
        }
      });
    };

    return LoginHandler;

  })(Hive.UiObject);

}).call(this);
